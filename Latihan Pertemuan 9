#Adjacency Matrix
import numpy as np

#Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0],
                             [0, 0, 1, 0],
                             [0, 1, 0, 1],
                             [1, 0, 1, 0]])

#Set the damping factor
damping_factor = 0.85

#Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

#Number of iterations
num_iterations = 100

#Number of iterations
num_iterations = 100

for i in range(num_iterations):
  new_page_rank = np.zeros(num_pages)
  for j in range(num_pages):
    #Calculate the PageRank contribution from each linking page
    linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
    for linking_page in linking_pages:
      new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
    new_page_rank[j] = damping_factor * new_page_rank[j] + (1 - damping_factor) / num_pages
  pages_rank = new_page_rank

#Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


#Membuat Graph dari Adjacency Matrix
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

adjacency_matrix = np.array ([[ 0,  1,  0,  0],
                              [ 0,  0,  1,  0],
                              [ 0,  1,  0,  1],
                              [ 1,  0,  1,  0]])

G = nx.DiGraph()

num_pages = len(adjacency_matrix)
G.add_nodes_from(range(num_pages))

for i in range(num_pages):
     for j in range(num_pages):
        if adjacency_matrix[i,j] == 1:
            G.add_edge(i,j)

pos = nx.spring_layout(G)
labels = {i: f"Page {i+1}" for i in range(num_pages)}
nx.draw(G, pos, with_labels=True, labels=labels, node_size=1000,node_color='grey', font_size=10,font_color='black',font_weight='bold',arrowsize=20)
plt.title("PageRank Example Graph")
plt.show()
